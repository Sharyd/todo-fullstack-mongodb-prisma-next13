generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  permissionsActions  String[]
  accounts        Account[]
  todos           Todo[]
  notifications    Notification[]
  likes     Like[]
comments Comment[]  
  sentPermissionRequests    PermissionRequest[] @relation("PermissionRequestsFrom")
  receivedPermissionRequests PermissionRequest[] @relation("PermissionRequestsTo")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  User      User     @relation(fields: [userId], references: [id])
}




model Todo {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  completed       Boolean  @default(false)
  todoId          String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @db.ObjectId
  userName        String?
  order           Int?
 
  comments Comment[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum RequestStatus {
  Pending
  Accepted
  Declined
}

model PermissionRequest {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  fromUserId      String @db.ObjectId
  toUserId        String @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          RequestStatus @default(Pending)
  fromUserName    String?

  fromUser        User     @relation("PermissionRequestsFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser          User     @relation("PermissionRequestsTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
}

model Comment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String @db.ObjectId
  todoId    String @db.ObjectId
  parentId  String? @db.ObjectId
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  todo      Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToComment")
  likes     Like[] 
}
model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  commentId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@unique([userId, commentId])
}
